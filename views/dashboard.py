import streamlit as st
import random
import altair as alt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from data.users import load_user_data, save_user_data
from data.test_questions import NEUROLEADER_TYPES
from config.settings import DAILY_MISSIONS, XP_LEVELS, USER_AVATARS
from data.lessons import load_lessons
from utils.goals import get_user_goals, calculate_goal_metrics
from utils.daily_missions import get_daily_missions_progress
from views.degen_explorer import plot_radar_chart
from data.neuroleader_details import degen_details
from utils.material3_components import apply_material3_theme
from utils.layout import get_device_type, responsive_grid, responsive_container, toggle_device_view
from utils.components import (
    zen_header, mission_card, degen_card, progress_bar, stat_card, 
    xp_level_display, zen_button, notification, leaderboard_item, 
    add_animations_css, data_chart, user_stats_panel, lesson_card
)
from utils.real_time_updates import get_live_user_stats, live_xp_indicator

def calculate_xp_progress(user_data):
    """Calculate XP progress and dynamically determine the user's level"""
    # Dynamically determine the user's level based on XP
    for level, xp_threshold in sorted(XP_LEVELS.items(), reverse=True):
        if user_data['xp'] >= xp_threshold:
            user_data['level'] = level
            break

    # Calculate progress to the next level
    next_level = user_data['level'] + 1
    if next_level in XP_LEVELS:
        current_level_xp = XP_LEVELS[user_data['level']]
        next_level_xp = XP_LEVELS[next_level]
        xp_needed = next_level_xp - current_level_xp
        xp_progress = user_data['xp'] - current_level_xp
        xp_percentage = min(100, int((xp_progress / xp_needed) * 100))
        return xp_percentage, xp_needed - xp_progress

    return 100, 0

def get_top_users(limit=5):
    """Get top users by XP"""
    users_data = load_user_data()
    leaderboard = []
    
    for username, data in users_data.items():
        leaderboard.append({
            'username': username,
            'level': data.get('level', 1),
            'xp': data.get('xp', 0)
        })
    
    # Sort by XP (descending)
    leaderboard.sort(key=lambda x: x['xp'], reverse=True)
    return leaderboard[:limit]

def get_user_rank(username):
    """Get user rank in the leaderboard"""
    users_data = load_user_data()
    leaderboard = []
    
    for user, data in users_data.items():
        leaderboard.append({
            'username': user,
            'xp': data.get('xp', 0)
        })
    
    # Sort by XP (descending)
    leaderboard.sort(key=lambda x: x['xp'], reverse=True)
    
    # Find user rank
    for i, user in enumerate(leaderboard):
        if user['username'] == username:
            return {'rank': i + 1, 'xp': user['xp']}
    
    return {'rank': 0, 'xp': 0}

def get_user_xp_history(username, days=30):
    """Simulate XP history data (for now)"""
    # This would normally come from a database
    # For now, we'll generate fictional data
    history = []
    today = datetime.now()
    
    # Generate data points for the last X days
    xp = load_user_data().get(username, {}).get('xp', 0)
    daily_increment = max(1, int(xp / days))
    
    for i in range(days):
        date = today - timedelta(days=days-i)
        history.append({
            'date': date.strftime('%Y-%m-%d'),
            'xp': max(0, int(xp * (i+1) / days))
        })
    
    return history

# def display_lesson_cards(lessons_list, tab_name="", custom_columns=None):
#     """Display lesson cards in a responsive layout
    
#     Args:
#         lessons_list: Dictionary of lessons to display
#         tab_name: Name of the tab to use for creating unique button keys
#         custom_columns: Optional pre-defined columns for responsive layout
#     """
#     if not lessons_list:
#         st.info("Brak dostƒôpnych lekcji w tej kategorii.")
#         return
    
#     users_data = load_user_data()
#     user_data = users_data.get(st.session_state.username, {})
#       # Je≈õli nie dostarczono niestandardowych kolumn, u≈ºyj jednej kolumny na ca≈ÇƒÖ szeroko≈õƒá
#     if custom_columns is None:
#         # Zawsze u≈ºywaj jednej kolumny na ca≈ÇƒÖ szeroko≈õƒá
#         custom_columns = [st.container()]
    
#     # Display lessons in the responsive grid
#     for i, (lesson_id, lesson) in enumerate(lessons_list.items()):
#         # Get lesson properties
#         difficulty = lesson.get('difficulty', 'intermediate')
#         is_completed = lesson_id in user_data.get('completed_lessons', [])# Przygotuj symbol trudno≈õci
#         if difficulty == "beginner":
#             difficulty_symbol = "üü¢"
#         elif difficulty == "intermediate":
#             difficulty_symbol = "üü†"
#         else:
#             difficulty_symbol = "üî¥"
#           # U≈ºyj zawsze pierwszej kolumny, bo teraz mamy tylko jednƒÖ kolumnƒô
#         with custom_columns[0]:
#             # U≈ºyj komponentu lesson_card dla sp√≥jno≈õci z widokiem lekcji
#             lesson_card(
#                 title=lesson.get('title', 'Lekcja'),
#                 description=lesson.get('description', 'Ta lekcja wprowadza podstawowe zasady...'),
#                 xp=lesson.get('xp_reward', 30),
#                 difficulty=difficulty,
#                 category=lesson.get('tag', ''),
#                 completed=is_completed,
#                 button_text="Powt√≥rz lekcjƒô" if is_completed else "Rozpocznij",
#                 button_key=f"{tab_name}_start_{lesson_id}_{i}",
#                 lesson_id=lesson_id,
#                 on_click=lambda lesson_id=lesson_id: (
#                     setattr(st.session_state, 'current_lesson', lesson_id),
#                     setattr(st.session_state, 'page', 'lesson'),
#                     st.rerun()
#                 )
#         )

def display_lesson_cards(lessons_list, tab_name="", custom_columns=None):
    """Display lesson cards in a responsive layout
    
    Args:
        lessons_list: Dictionary of lessons to display
        tab_name: Name of the tab to use for creating unique button keys
        custom_columns: Optional pre-defined columns for responsive layout
    """
    if not lessons_list:
        st.info("Brak dostƒôpnych lekcji w tej kategorii.")
        return
    
    users_data = load_user_data()
    user_data = users_data.get(st.session_state.username, {})
    completed_lessons = user_data.get('completed_lessons', [])
    
    # Je≈õli nie dostarczono niestandardowych kolumn, u≈ºyj jednej kolumny na ca≈ÇƒÖ szeroko≈õƒá
    if custom_columns is None:
        custom_columns = [st.container()]
    
    # Display lessons using lesson_card component
    for i, (lesson_id, lesson) in enumerate(lessons_list.items()):
        is_completed = lesson_id in completed_lessons
        
        # U≈ºyj zawsze pierwszej kolumny
        with custom_columns[0]:
            lesson_card(
                title=lesson.get('title', 'Lekcja'),
                description=lesson.get('description', 'Ta lekcja wprowadza podstawowe zasady...'),
                xp=lesson.get('xp_reward', 30),
                difficulty=lesson.get('difficulty', 'beginner'),
                category=lesson.get('tag', ''),
                completed=is_completed,
                button_text="Powt√≥rz lekcjƒô" if is_completed else "Rozpocznij",
                button_key=f"{tab_name}_start_{lesson_id}_{i}",
                lesson_id=lesson_id,
                on_click=lambda lesson_id=lesson_id: (
                    setattr(st.session_state, 'current_lesson', lesson_id),
                    setattr(st.session_state, 'page', 'lesson'),
                    st.rerun()
                )
            )
def get_recommended_lessons(username):
    """Get recommended lessons based on user type"""
    lessons = load_lessons()
    users_data = load_user_data()
    user_data = users_data.get(username, {})
    neuroleader_type = user_data.get('neuroleader_type', None)
    
    # If user has a neuroleader type, filter lessons to match
    if neuroleader_type:
        return {k: v for k, v in lessons.items() if v.get('recommended_for', None) == neuroleader_type}
    
    # Otherwise, return a small selection of beginner lessons
    return {k: v for k, v in lessons.items() if v.get('difficulty', 'medium') == 'beginner'}

def get_popular_lessons():
    """Get most popular lessons based on completion count"""
    # Dla symulanty, zwracamy standardowe lekcje z modyfikatorem "popular"
    # aby zapewniƒá unikalno≈õƒá kluczy lekcji miƒôdzy r√≥≈ºnymi kategoriami
    lessons = load_lessons()
    return lessons

def get_newest_lessons():
    """Get newest lessons"""
    # Dla symulanty, zwracamy standardowe lekcje z modyfikatorem "newest"
    # aby zapewniƒá unikalno≈õƒá kluczy lekcji miƒôdzy r√≥≈ºnymi kategoriami
    lessons = load_lessons()
    return lessons

def get_daily_missions(username):
    """Get daily missions for user"""
    # For now, use the missions from settings
    # We're only showing the first 3 missions to the user
    return DAILY_MISSIONS[:3]

def show_stats_section(user_data, device_type):
    """Sekcja z kartami statystyk - alternatywne podej≈õcie z kolumnami"""
    
    # Oblicz dane statystyk
    xp = user_data.get('xp', 0)
    completed_lessons = len(user_data.get('completed_lessons', []))
    missions_progress = get_daily_missions_progress(st.session_state.username)
    streak = missions_progress['streak']
    level = user_data.get('level', 1)
    
    # Oblicz trend XP (przyk≈Çadowy +15%)
    xp_change = "+15%"
    lessons_change = f"+{min(3, completed_lessons)}"
    streak_change = f"+{min(1, streak)}"
    level_change = f"+{max(0, level - 1)}"
    
    # Utw√≥rz 5 kolumn
    cols = st.columns(4)
    
    # 5 kart statystyk
    stats = [
        {"icon": "üèÜ", "value": f"{xp}", "label": "Punkty XP", "change": xp_change},
        {"icon": "‚≠ê", "value": f"{level}", "label": "Poziom", "change": level_change},
        {"icon": "üìö", "value": f"{completed_lessons}", "label": "Uko≈Ñczone lekcje", "change": lessons_change},
        {"icon": "üî•", "value": f"{streak}", "label": "Aktualna passa", "change": streak_change},

        # {"icon": "üéØ", "value": f"{missions_progress['completed']}", "label": "Dzisiejsze misje", "change": f"+{missions_progress['completed']}"}
    ]
    
    # Wygeneruj kartƒô w ka≈ºdej kolumnie
    for i, stat in enumerate(stats):
        with cols[i]:
            st.markdown(f"""
            <div class="stat-card">
                <div class="stat-icon">{stat['icon']}</div>
                <div class="stat-value">{stat['value']}</div>
                <div class="stat-label">{stat['label']}</div>
                <div class="stat-change positive">{stat['change']}</div>
            </div>
            """, unsafe_allow_html=True)

# def show_main_content(user_data, device_type):
#     """G≈Ç√≥wna zawarto≈õƒá dashboardu"""
    
#     # Sekcja ostatnich aktywno≈õci
#     show_recent_activities(user_data)
    
#     # Sekcja dostƒôpnych lekcji
#     show_available_lessons(device_type)
    
#     # Sekcja misji dziennych
#     show_daily_missions_section()

def show_main_content(user_data, device_type):
    """G≈Ç√≥wna zawarto≈õƒá dashboardu"""
    # Sekcja dostƒôpnych lekcji - teraz u≈ºywa lesson_card
    show_available_lessons(device_type)
    # Sekcja wynik√≥w testu neuroleadera - tylko je≈õli u≈ºytkownik wykona≈Ç test
    show_neuroleader_results_section(user_data, device_type)
        


    # Sekcja misji dziennych
    show_daily_missions_section()    # Sekcja ostatnich aktywno≈õci

    

def show_neuroleader_results_section(user_data, device_type):
    """Sekcja wynik√≥w testu neuroleadera w g≈Ç√≥wnej zawarto≈õci dashboardu"""
    
    # Sprawd≈∫ czy u≈ºytkownik ma wyniki testu neuroleadera
    neuroleader_type = user_data.get('neuroleader_type') or user_data.get('degen_type')
    test_taken = user_data.get('test_taken', False)
    test_scores = user_data.get('test_scores')
    
    if neuroleader_type and (test_taken or test_scores):
        st.markdown("""
        <div class="dashboard-section">
            <div class="section-header">
                <h3 class="section-title">üß† Tw√≥j profil neuroleaderski</h3>
            </div>
        """, unsafe_allow_html=True)
        
        # Get neuroleader color for styling
        neuroleader_color = NEUROLEADER_TYPES.get(neuroleader_type, {}).get('color', '#3498db')
        
        # Header with prominent display of result
        st.markdown(f"""
        <div style='text-align: center; padding: 20px; border-radius: 15px; 
                    background: linear-gradient(135deg, {neuroleader_color}20, {neuroleader_color}10);
                    border: 2px solid {neuroleader_color}40; margin-bottom: 20px;'>
            <h3 style='color: {neuroleader_color}; margin-bottom: 10px; font-size: 1.2em;'>
                üß¨ Tw√≥j dominujƒÖcy typ neuroleadera
            </h3>
            <h2 style='color: {neuroleader_color}; margin: 10px 0; font-size: 1.8em; font-weight: bold;'>
                {neuroleader_type}
            </h2>
            <p style='color: #666; margin: 0; font-size: 1em;'>
                {NEUROLEADER_TYPES.get(neuroleader_type, {}).get('description', 'Opis niedostƒôpny')}
            </p>
        </div>
        """, unsafe_allow_html=True)
          # Show radar chart if test scores are available
        if test_scores:
            try:
                radar_fig = plot_radar_chart(test_scores, device_type=device_type)
                
                # Display radar chart based on device type
                if device_type == 'mobile':
                    st.markdown("#### üìä Tw√≥j profil w szczeg√≥≈Çach")
                    st.pyplot(radar_fig)
                else:
                    col1, col2 = st.columns([2, 1])
                    with col1:
                        st.markdown("#### üìä Tw√≥j profil w szczeg√≥≈Çach")
                        st.pyplot(radar_fig)
                        
                    with col2:
                        # Show key characteristics in sidebar format
                        st.markdown("##### üí™ Mocne strony:")
                        strengths = NEUROLEADER_TYPES.get(neuroleader_type, {}).get('strengths', [])
                        for strength in strengths[:3]:  # Show only first 3 for space
                            st.markdown(f"‚Ä¢ {strength}")
                        
                        st.markdown("##### üöß Wyzwania:")
                        challenges = NEUROLEADER_TYPES.get(neuroleader_type, {}).get('challenges', [])
                        for challenge in challenges[:3]:  # Show only first 3 for space
                            st.markdown(f"‚Ä¢ {challenge}")
                            
            except Exception as e:
                st.warning("Nie uda≈Ço siƒô wygenerowaƒá wykresu radarowego.")
          # Action buttons
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if zen_button("üîç Szczeg√≥≈Çowy opis", key="dashboard_detailed_description"):
                st.session_state.page = 'degen_explorer'
                st.rerun()
                
        with col2:
            if zen_button("üîÑ Wykonaj test ponownie", key="dashboard_retake_test"):
                st.session_state.page = 'degen_explorer'
                st.rerun()
                
        with col3:
            if zen_button("üìà Zobacz profil", key="dashboard_view_profile"):
                st.session_state.page = 'profile'
                st.rerun()
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    elif not neuroleader_type:
        # Encourage user to take the test if they haven't yet
        st.markdown("""
        <div class="dashboard-section">
            <div class="section-header">
                <h3 class="section-title">üß† Odkryj sw√≥j typ neuroleadera</h3>
            </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='text-align: center; padding: 20px; border-radius: 15px; 
                    background: linear-gradient(135deg, #3498db20, #3498db10);
                    border: 2px solid #3498db40; margin-bottom: 20px;'>
            <h3 style='color: #3498db; margin-bottom: 15px;'>
                üéØ Jeszcze nie pozna≈Çe≈õ swojego typu neuroleadera!
            </h3>
            <p style='color: #666; margin-bottom: 20px; line-height: 1.6;'>
                Wykonaj nasz test psychologiczny i odkryj sw√≥j unikalny profil przyw√≥dczy. 
                Test zajmie tylko kilka minut i pomo≈ºe Ci lepiej zrozumieƒá swoje mocne strony jako lider.
            </p>        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if zen_button("üöÄ Wykonaj test neuroleadera", key="dashboard_take_test", use_container_width=True):
                st.session_state.page = 'degen_explorer'
                st.rerun()
        
        st.markdown("</div>", unsafe_allow_html=True)


def show_dashboard_sidebar(user_data, device_type):
    """Sidebar z dodatkowymi informacjami"""       # Profil neuroleaderski
    show_recent_activities(user_data)

    show_neuroleader_profile_compact(user_data)
    
    # Ranking XP
    show_leaderboard_compact()

    # Widget postƒôpu
    show_progress_widget(user_data)
    


def show_recent_activities(user_data):
    """Lista ostatnich aktywno≈õci"""
    st.markdown("""
    <div class="dashboard-section">
        <div class="section-header">
            <h3 class="section-title">Ostatnie aktywno≈õci</h3>
            <a href="#" class="section-action">Zobacz wszystkie</a>
        </div>
        <div class="activity-list">
    """, unsafe_allow_html=True)
      # Import badge configuration
    try:
        from config.badges import BADGES
    except ImportError:
        from config.settings import BADGES
    
    # Pobierz dane u≈ºytkownika
    completed_lessons = user_data.get('completed_lessons', [])
    neuroleader_type = user_data.get('neuroleader_type', None)
    user_badges = user_data.get('badges', [])
    badge_timestamps = user_data.get('badge_timestamps', {})
    
    activities = []
    
    def get_time_ago(timestamp_str):
        """Oblicza ile czasu temu wydarzy≈Ço siƒô co≈õ na podstawie timestampu"""
        try:
            from datetime import datetime
            timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
            now = datetime.now()
            diff = now - timestamp
            
            if diff.days > 0:
                return f"{diff.days} {'dzie≈Ñ' if diff.days == 1 else 'dni'} temu"
            elif diff.seconds > 3600:
                hours = diff.seconds // 3600
                return f"{hours} {'godzinƒô' if hours == 1 else 'godzin'} temu"
            elif diff.seconds > 60:
                minutes = diff.seconds // 60
                return f"{minutes} {'minutƒô' if minutes == 1 else 'minut'} temu"
            else:
                return "przed chwilƒÖ"
        except:
            return "niedawno"
    
    # Dodaj informacje o zdobytych odznakach z timestampami
    if user_badges and badge_timestamps:
        # Sortuj odznaki wed≈Çug czasu zdobycia (najnowsze pierwsze)
        badges_with_time = []
        for badge_id in user_badges:
            if badge_id in badge_timestamps:
                badges_with_time.append((badge_id, badge_timestamps[badge_id]))
        
        # Sortuj wed≈Çug timestampu (najnowsze pierwsze) i we≈∫ ostatnie 2
        badges_with_time.sort(key=lambda x: x[1], reverse=True)
        recent_badges = badges_with_time[:2]
        
        for badge_id, timestamp in recent_badges:
            badge_info = BADGES.get(badge_id, {})
            badge_name = badge_info.get('name', badge_id)
            badge_icon = badge_info.get('icon', 'üèÜ')
            time_ago = get_time_ago(timestamp)
            
            activities.append({
                'icon': badge_icon,
                'color': '#f39c12',
                'title': f'Zdobyto odznakƒô: {badge_name}',
                'time': time_ago
            })
    elif user_badges:
        # Fallback dla starych danych bez timestamp√≥w
        recent_badges = user_badges[-2:] if len(user_badges) >= 2 else user_badges
        for badge_id in reversed(recent_badges):
            badge_info = BADGES.get(badge_id, {})
            badge_name = badge_info.get('name', badge_id)
            badge_icon = badge_info.get('icon', 'üèÜ')
            
            activities.append({
                'icon': badge_icon,
                'color': '#f39c12',
                'title': f'Zdobyto odznakƒô: {badge_name}',
                'time': 'niedawno'
            })
      # Dodaj informacje o uko≈Ñczonych lekcjach
    if completed_lessons:
        # Pobierz tytu≈Ç ostatniej uko≈Ñczonej lekcji
        last_lesson_id = completed_lessons[-1]
        lessons_data = load_lessons()
        lesson_title = lessons_data.get(last_lesson_id, {}).get('title', last_lesson_id)
        
        activities.append({
            'icon': '‚úì',
            'color': '#27ae60',
            'title': f'Uko≈Ñczono lekcjƒô: {lesson_title}',
            'time': '2 godziny temu'
        })
    
    # Dodaj informacje o odkrytym typie neuroleadera
    if neuroleader_type:
        activities.append({
            'icon': 'üß†',
            'color': '#3498db',
            'title': f'Odkryto typ neuroleadera: {neuroleader_type}',
            'time': '1 dzie≈Ñ temu'
        })
    
    # Dodaj standardowƒÖ aktywno≈õƒá je≈õli brak innych
    if not activities:
        activities.append({
            'icon': 'üî•',
            'color': '#e67e22',
            'title': 'Rozpoczƒôto nowƒÖ passƒô dziennƒÖ',
            'time': '3 godziny temu'
        })
    
    for activity in activities:
        st.markdown(f"""
            <div class="activity-item">
                <div class="activity-icon" style="background: rgba({activity['color'][1:3]}, {activity['color'][3:5]}, {activity['color'][5:7]}, 0.1); color: {activity['color']};">
                    {activity['icon']}
                </div>
                <div class="activity-content">
                    <div class="activity-title">{activity['title']}</div>
                    <div class="activity-time">{activity['time']}</div>
                </div>
            </div>
        """, unsafe_allow_html=True)
    
    st.markdown("""
        </div>
    </div>
    """, unsafe_allow_html=True)

# def show_available_lessons(device_type):
#     """Sekcja dostƒôpnych lekcji w g≈Ç√≥wnej zawarto≈õci"""
#     st.markdown("""
#     <div class="dashboard-section">
#         <div class="section-header">
#             <h3 class="section-title">Dostƒôpne lekcje</h3>
#         </div>
#     """, unsafe_allow_html=True)
    
#     # Pobierz lekcje
#     lessons = load_lessons()
    
#     # Wy≈õwietl pierwsze 3 lekcje w kompaktowym formacie
#     lesson_count = 0
#     for lesson_id, lesson in lessons.items():
#         if lesson_count >= 3:  # Ogranicz do 3 lekcji w widoku g≈Ç√≥wnym
#             break
            
#         difficulty = lesson.get('difficulty', 'intermediate')
#         if difficulty == "beginner":
#             difficulty_color = "#27ae60"
#             difficulty_icon = "üü¢"
#         elif difficulty == "intermediate":
#             difficulty_color = "#f39c12"
#             difficulty_icon = "üü†"
#         else:
#             difficulty_color = "#e74c3c"
#             difficulty_icon = "üî¥"
        
#         st.markdown(f"""
#         <div class="compact-item">
#             <div class="compact-icon" style="color: {difficulty_color};">{difficulty_icon}</div>
#             <div class="compact-content">
#                 <div class="compact-title">{lesson.get('title', 'Lekcja')}</div>
#                 <div class="compact-progress">XP: {lesson.get('xp_reward', 30)} ‚Ä¢ {difficulty.title()}</div>
#             </div>
#         </div>
#         """, unsafe_allow_html=True)
        
#         lesson_count += 1
    
#     # Przycisk do wszystkich lekcji
#     if zen_button("Zobacz wszystkie lekcje", key="all_lessons_compact"):
#         # Tu mo≈ºna dodaƒá nawigacjƒô do pe≈Çnej listy lekcji
#         pass
    
#     st.markdown("</div>", unsafe_allow_html=True)

def show_available_lessons(device_type):
    """Sekcja dostƒôpnych lekcji w g≈Ç√≥wnej zawarto≈õci"""
    st.markdown("""
    <div class="dashboard-section">
        <div class="section-header">
            <h3 class="section-title">Dostƒôpne lekcje</h3>
        </div>
    """, unsafe_allow_html=True)
    
    # Pobierz dane u≈ºytkownika
    users_data = load_user_data()
    user_data = users_data.get(st.session_state.username, {})
    completed_lessons = user_data.get('completed_lessons', [])
    
    # Pobierz lekcje
    lessons = load_lessons()
    
    # Wy≈õwietl pierwsze 3 lekcje u≈ºywajƒÖc lesson_card
    lesson_count = 0
    for lesson_id, lesson in lessons.items():
        if lesson_count >= 3:  # Ogranicz do 3 lekcji w widoku g≈Ç√≥wnym
            break
            
        # Sprawd≈∫ czy lekcja jest uko≈Ñczona
        is_completed = lesson_id in completed_lessons
        
        # U≈ºyj lesson_card z utils.components
        lesson_card(
            title=lesson.get('title', 'Lekcja bez tytu≈Çu'),
            description=lesson.get('description', 'Opis lekcji...'),
            xp=lesson.get('xp_reward', 30),
            difficulty=lesson.get('difficulty', 'beginner'),
            category=lesson.get('tag', 'Og√≥lne'),
            completed=is_completed,
            button_text="Powt√≥rz lekcjƒô" if is_completed else "Rozpocznij lekcjƒô",
            button_key=f"dashboard_lesson_{lesson_id}_{lesson_count}",
            lesson_id=lesson_id,
            on_click=lambda lid=lesson_id: (
                setattr(st.session_state, 'current_lesson', lid),
                setattr(st.session_state, 'page', 'lesson'),
                st.rerun()
            )
        )
        
        lesson_count += 1
    
    # Przycisk do wszystkich lekcji
    if zen_button("Zobacz wszystkie lekcje", key="all_lessons_from_dashboard"):
        st.session_state.page = 'lesson'
        st.rerun()
    
    st.markdown("</div>", unsafe_allow_html=True)

def show_daily_missions_section():
    """Sekcja misji dziennych w g≈Ç√≥wnej zawarto≈õci"""
    st.markdown("""
    <div class="dashboard-section">
        <div class="section-header">
            <h3 class="section-title">Misje dnia</h3>
        </div>
    """, unsafe_allow_html=True)
    
    # Get daily missions and progress
    daily_missions = get_daily_missions(st.session_state.username)
    missions_progress = get_daily_missions_progress(st.session_state.username)
    
    # Wy≈õwietl pierwsze 3 misje w kompaktowym formacie
    mission_count = 0
    for mission in daily_missions:
        if mission_count >= 3:
            break
            
        is_completed = mission['title'] in missions_progress['completed_ids']
        
        st.markdown(f"""
        <div class="compact-item">
            <div class="compact-icon">{mission['badge']}</div>
            <div class="compact-content">
                <div class="compact-title">{mission['title']}</div>
                <div class="compact-progress">{'‚úÖ Uko≈Ñczone' if is_completed else f"XP: {mission['xp']}"}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        mission_count += 1
    
    st.markdown("</div>", unsafe_allow_html=True)

def show_progress_widget(user_data):
    """Widget postƒôpu w sidebarze"""
    xp = user_data.get('xp', 0)
    level = user_data.get('level', 1)
    next_level_xp = XP_LEVELS.get(level + 1, xp + 100)
    current_level_xp = XP_LEVELS.get(level, 0)
    
    # Zabezpieczenie przed None values
    if next_level_xp is None:
        next_level_xp = xp + 100
    if current_level_xp is None:
        current_level_xp = 0
    
    # Oblicz procent postƒôpu
    if next_level_xp > current_level_xp:
        progress_percent = int(((xp - current_level_xp) / (next_level_xp - current_level_xp)) * 100)
    else:
        progress_percent = 100
    
    # Upewnij siƒô, ≈ºe progress_percent jest w zakresie 0-100
    progress_percent = max(0, min(100, progress_percent))
    
    st.markdown(f"""
    <div class="progress-widget">
        <div class="progress-text">{progress_percent}%</div>
        <div class="progress-label">Postƒôp do poziomu {level + 1}</div>
        <div style="margin-top: 16px; font-size: 14px;">
            Poziom {level} ‚Ä¢ {xp} XP
        </div>
    </div>
    """, unsafe_allow_html=True)

def show_neuroleader_profile_compact(user_data):
    """Kompaktowy profil neuroleaderski"""
    st.markdown("""
    <div class="dashboard-section">
        <div class="section-header">
            <h3 class="section-title">Profil neuroleaderski</h3>
        </div>
    """, unsafe_allow_html=True)
    
    if 'test_scores' in user_data:
        # Poka≈º dominujƒÖcy typ
        dominant_type = max(user_data['test_scores'].items(), key=lambda x: x[1])[0]
        neuroleader_color = NEUROLEADER_TYPES.get(dominant_type, {}).get('color', '#3498db')
        
        st.markdown(f"""
        <div style="text-align: center; padding: 16px;">
            <div style="font-size: 24px; margin-bottom: 8px;">üß¨</div>
            <div style="font-weight: 600; color: {neuroleader_color};">{dominant_type}</div>
            <div style="font-size: 12px; color: var(--text-secondary); margin-top: 4px;">
                Tw√≥j dominujƒÖcy typ
            </div>
        </div>
        """, unsafe_allow_html=True)        
        if zen_button("Zobacz szczeg√≥≈Çy", key="profile_details"):
            st.session_state.page = 'degen_explorer'
            st.rerun()
    else:
        st.info("Wykonaj test, aby odkryƒá sw√≥j profil")
        if zen_button("Wykonaj test", key="take_test_sidebar"):
            st.session_state.page = 'degen_explorer'
            st.rerun()
    
    st.markdown("</div>", unsafe_allow_html=True)

def show_leaderboard_compact():
    """Kompaktowy ranking XP"""
    st.markdown("""
    <div class="dashboard-section">
        <div class="section-header">
            <h3 class="section-title">Ranking XP</h3>
        </div>
    """, unsafe_allow_html=True)
    
    # Pobierz top 3 u≈ºytkownik√≥w
    top_users = get_top_users(3)
    
    for i, user in enumerate(top_users):
        rank_icon = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â"
        is_current = user['username'] == st.session_state.username
        
        st.markdown(f"""
        <div class="compact-item" style="{'background: rgba(41, 128, 185, 0.1);' if is_current else ''}">
            <div class="compact-icon">{rank_icon}</div>
            <div class="compact-content">
                <div class="compact-title">{'Ty' if is_current else user['username']}</div>
                <div class="compact-progress">{user['xp']} XP</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)

def show_dashboard():
    # Zastosuj style Material 3
    apply_material3_theme()
    
    # Opcja wyboru urzƒÖdzenia w trybie deweloperskim
    if st.session_state.get('dev_mode', False):
        toggle_device_view()
    
    # Pobierz aktualny typ urzƒÖdzenia
    device_type = get_device_type()
      # U≈ºywamy naszego komponentu nag≈Ç√≥wka - bez dodatkowego CSS
    zen_header("Dashboard Neuroleader√≥w")
    
    # Add live XP indicator
    live_xp_indicator()
    
    # Dodajemy animacje CSS
    add_animations_css()    # Use complete user data instead of limited live stats to access neuroleader test data
    users_data = load_user_data()
    user_data = users_data.get(st.session_state.username, {})
    
    # G≈Ç√≥wny kontener dashboard
    st.markdown('<div class="dashboard-container">', unsafe_allow_html=True)
    
    # Sekcja statystyk - pe≈Çna szeroko≈õƒá
    show_stats_section(user_data, device_type)
    
    # G≈Ç√≥wna zawarto≈õƒá i sidebar
    if device_type == 'mobile':
        # Na telefonach wy≈õwietl sekcje jedna pod drugƒÖ
        show_main_content(user_data, device_type)
        show_dashboard_sidebar(user_data, device_type)
    else:
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown('<div class="main-content">', unsafe_allow_html=True)
            show_main_content(user_data, device_type)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="dashboard-sidebar">', unsafe_allow_html=True)
            show_dashboard_sidebar(user_data, device_type)
            st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)    # Sekcja promujƒÖca rozw√≥j umiejƒôtno≈õci
    st.markdown("""
    <div class="dashboard-section">
        <h3>üå≥ Rozwijaj swoje umiejƒôtno≈õci</h3>
        <p>Ulepszaj swoje umiejƒôtno≈õci przyw√≥dcze i odblokuj nowe mo≈ºliwo≈õci.</p>
    </div>
    """, unsafe_allow_html=True)

    if zen_button("Przejd≈∫ do drzewa umiejƒôtno≈õci", key="goto_skills"):
        st.session_state.page = "skills"
        st.rerun()

    # Admin button for admin users
    admin_users = ["admin", "zenmaster"]  # Lista administrator√≥w
    if st.session_state.get('username') in admin_users:
        st.markdown("---")
        if zen_button("üõ°Ô∏è Panel administratora", key="admin_panel"):
            st.session_state.page = 'admin'
            st.rerun()
